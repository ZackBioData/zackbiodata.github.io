---
title: "Day 7: Rosalind Problems â€“ Overlap Graphs & "
subtitle: "Efficient Algorithmic Modelling and FASTA Data Aggregation"
date: 2025-07-29
image: ../images/100daysofcode/rosiland.png
categories: [Bioinformatics, Biopython, Algorithm Design, FASTA Parsing]
html:
  toc: true
  code-fold: true
---
## Problem 1: [Overlap Graphs](https://rosalind.info/problems/grph/)

Given a collection of DNA strings in FASTA format, construct the overlap graph where each edge represents a suffix-prefix match of length *k*.

[My solution](https://github.com/ZackBioData/100days-of-coding/blob/main/Day%207%20-%20rosiland%20problems/Overlap%20Graphs.py)

```python
from Bio import SeqIO

k = 3
records = list(SeqIO.parse("rosalind_grph (1).fasta", "fasta"))
for record in records:
    record_suffix = str(record.seq)[-k:]
    for other_record in records:
        if record.id == other_record.id:
            continue
        other_prefix = str(other_record.seq)[:k]
        if record_suffix == other_prefix:
            print(record.id, other_record.id)
```

### What I learned:
- Overlap graphs are generated by comparing the last *k* bases of one sequence to the first *k* of another.
- Use of `continue` avoids redundant self-comparisons.
- `str(record.seq)` converts Biopython `Seq` objects for string slicing.


## Problem 2: [Mortal Fibonacci Rabbits](https://rosalind.info/problems/fibd/)

[My solution](https://github.com/ZackBioData/100days-of-coding/blob/main/Day%207%20-%202%20rosillland%20problems/Expected%20Offspring)


```python
counts = [1, 0, 0, 1, 0, 1]
weights = [1.0, 1.0, 1.0, 0.75, 0.5, 0.0]

expected_dominant_offspring = sum(2 * count * prob for count, prob in zip(counts, weights))
print(expected_dominant_offspring)
```

### What I learned:
- zip(counts, weights) combines both lists for pairwise computation in the list comprehension.